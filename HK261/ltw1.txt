Tuần 2:
Header:
- Đổi icon trong header : <link rel="icon" href="/favicon.ico" type="image/x-icon">
Body:
- Thẻ div (block element): để gom nhiều thẻ lại
- Tiêu đề trong body (không xài để làm chữ bự)(block element): <h1></h1>
	Các cấp thấp hơn là h2 h3,... tới h6
- Ngắt dòng: <br>
- Kẻ ngang: <hr>
- Đoạn văn (block element): <p>
- Style cho thẻ: color, text-align, font-size, background-color, margin, padding, display(block/inline/flex), width, height, border,... và các style tự định nghĩa trong css
	<h2 style="color:blue; text-align:center;">Tiêu đề màu xanh căn giữa</h2>
	<p style="font-size:18px; background-color:#f0f0f0;">Đoạn văn có nền xám và chữ to</p>
- Kí tự đặc biệt trong thẻ: &nbsp(space), &gt(>), &lt(<), &amp(&), &quot(")
- Inline element: định dạng 1 phần thay vì toàn bộ
	<span> giống div, 
	<a> chèn link <a href="link_here" target="_blank" (để mở web trong tab mới)>
		Về đầu trang bằng <a>
			<!-- Đặt ở đầu trang -->
			<a id(hoặc name)="top"></a>

			<!-- Ở cuối trang hoặc bất kỳ đâu -->
			<a href="#top">Về đầu trang</a>
	<strong> in đậm, có ý nghĩa nhấn mạnh(<b> thì không), 
	<em> in nghiêng(<i> thì không), 
	<img> hình ảnh <img src="logo.png" alt="Logo">
	<input> cho nhập data, đặt <label> cho nó, type="checkbox" để tạo check box
	<button>
	<textarea> ô nhập nhiều dòng

- Phát sinh chữ ngẫu nhiên: lorem+số chữ. VD lorem5, lorem
- Giữ nguyên định dạng trong thẻ: <pre></pre>
- Hiển thị danh sách :
	- Có thứ tự order list <ol type="A/a/i/1/I">, chứa list items <li>
	- Không thứ tự unorder list <ul type="round/circle/square/>, chứa list items <li>
	<ol type="A">
	  <li>HTML</li>
	  <li>CSS</li>
	  <li>JavaScript</li>
	</ol>

- Thêm bảng:
	<table>: bắt đầu bảng.
	border="1": thêm viền cho bảng.
	<tr>: một hàng trong bảng.
	<th>: tiêu đề cột (in đậm, canh giữa).
	<td>: dữ liệu ô trong bảng
	Ví dụ:
		<table border="1">
		  <tr>
			<th>Họ và tên</th>
			<th>Tuổi</th>
			<th>Thành phố</th>
		  </tr>
		  <tr>
			<td>Nguyễn Văn A</td>
			<td>28</td>
			<td>Hà Nội</td>
		  </tr>
		  <tr>
			<td>Trần Thị B</td>
			<td>25</td>
			<td>Hồ Chí Minh</td>
		  </tr>
		</table>
	Để merge theo hàng hoặc cột thì sử dụng colspan, rowspan

- <nav> để chỉ các thẻ chứa navigation đi nơi khác, chỉ mang ý nghĩa đánh dấu
- Tạo dropdown list: <select>

- meta tag chứa các biến như #define trong C, ko xài để tính toán
	<meta charset="UTF-8">
	<meta name="description" content="Our title here">		=> SEO optimization
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

- Tuần 3: Form
	- Thẻ form:
	Để nhập data thì ta soạn trong type="text"
	Hành động khi ấn nút submit sẽ được định nghĩa trong action
		method: 
			GET là load data với các phương thức name (vd như dưới là username), gắn trong URL gởi tới trang web trong action
			POST là gởi data lớn, bảo mật (chưa mã hóa) vào trong phần body của package để tránh log
	- Thẻ label để tạo 1 label trỏ tới thẻ có id tương ứng
	- Checkbox thì sử dụng, check box thì chọn 1 hoặc nhiều, `checked` để chọn default
		<input type="checkbox" id="english" checked><label for="english">English</label> 
	- Radio box thì sử dụng, chọn 1 trong list các radio box có cùng name, `checked` để chọn default:
		<input type="radio" id="english" name="language" checked><label for="english">English</label>
		<input type="radio" id="vietnamese" name="language"><label for="vietnamese">Vietnamese</label>
	- Nút reset
		<input type="reset" value="reset">
	- Thuộc tính `placeholder` là để hiển chữ mờ hướng dẫn user input
	- Thẻ textarea: cho user input 1 đoạn lớn/nhiều dòng:
		<textarea name="message" id="" cols="30" rows="10"></textarea>
	- Thẻ select: xổ danh sách để chọn:
		<form action="xuly.htm" method="post">
			<select name="city" id="city">
				<option value="ny">New York</option>	<!-- sẽ post/get phần value nếu được chọn -->
				<option value="la">Los Angeles</option>
				<optgroup label="Europe">				<!-- gom các option chung loại lại với nhau -->
					<option value="lon">London</option>
					<option value="par">Paris</option>
					<option value="ber">Berlin</option>
				</optgroup>

			</select>
			<input type="submit" value="Submit">
		</form>
	
	- Thẻ fieldset để đóng khung data:
		<fieldset> <!-- Use fieldset to group related elements -->
			<legend>Subject</legend> <!-- Use this inside <fieldset> to describe the group -->
			<div>
				<input type="checkbox" name="subject" id="english">
				<label for="english">English</label>
			</div>
			<div>
				<input type="checkbox" name="subject" id="math">
				<label for="math">Math</label>
			</div>
		</fieldset>
	
	- Để tạo nút upload file thì thêm vào:
		<form action="" method="post" enctype="multipart/form-data">
			<input type="file" name="fileUpload" id="fileUpload">
		</form>
	

	<form action="sample.html" method="POST">
		<div>
			<label for="username">Username:</label> <input type="text" name="username" id="username(just use to point to this tag)" placeholder="Enter your username">
		</div>

		<div>
			<label for="password">Password:</label> <input type="password" name="password" id="password">
		</div>
		<input type="submit" value="Login"> <!-- nút này xài để post toàn bộ nội dung trong thẻ form -->

		<div>
			<textarea name="message" id="" cols="30" rows="10"></textarea>
		</div>
	</form>

Tuần 4: CSS
- Có 3 loại : 
	inline, nhúng vào web (internal) và link tới web (external)
	External : <link rel="stylesheet" href="css.css">

- Thẻ style trong html: định dạng theo thẻ. Chỉ xài khi nhúng css vào
	<style>
	h1	{
		color:green;
	{
	</style>

- Các định dạng trong css:
	h1 như trên: định dạng h1:
	h1	{
		color:green;
	{
	
	Tag:  #		- 1 tag không nên gắn cho nhiều thẻ, nếu cần thì xài class
		Trong css: 
			#firstTag{
				color:green;
			{
		Trong html:
			<div id=firstTag>Thẻ này được định dạng màu green theo css</div>

	Class: .	- sử dụng để gom nhóm các thẻ html có cùng css
		Trong css: 
			.firstClass{
				color:green;
			{
		Trong html:
			<div class=firstClass>Thẻ này được định dạng màu green theo css</div>

	Đối tượng cụ thể có thuộc tính class (vd thẻ h1 với class là firstClass): h1.firstClass
	Đối tượng cụ thể có đối tượng con chứa class (vd thẻ h1 là cha, class của con là firstClass): h1 .firstClass
	
	Type: input[type="submit"]
	
	Hover: a.hover định nghĩa khi ta di chuột vào
	First letter: định nghĩa size chữ cho kí tự đầu
	
	Nguyên lý định dạng trong CSS đọc từ phải qua trái:
		#content h1 : thẻ h1 nằm trong 1 thẻ cha có tag là content
		h1#content: thẻ có tag là content nằm trong h1
		ul.menu li a{}:thẻ a trong thẻ li trong thẻ ul có class là menu
			<ul class="menu">
			  <li><a href="#">Giới thiệu về chúng tôi</a></li>
			  <li><a href="#">Giới thiệu về bạn</a></li>
			  <li><a href="#">Giới thiệu chung</a></li>
			</ul>
		div a:Chọn tất cả thẻ <a> nằm bên trong bất kỳ thẻ <div> nào (dù là con trực tiếp hay gián tiếp)
		div + a:Chọn thẻ <a> ngay sau một thẻ <div> (phải là anh em liền kề).
			<div></div>
			<a href="#">Liên kết kế bên div</a>
		div > a:Chọn thẻ <a> là con trực tiếp của thẻ <div>.


	Định dạng tất cả các thẻ: *{...}  
	Thêm từ khóa !important thì sẽ override tất cả bất kể level

Tuần 5: 1 số thuộc tính của CSS:
	- Text
		- Căn dòng: text-align: right/left(default)/center/justify hoặc nhúng vào inline: <div style=text-align:ight/left(default)/center/justify>

		- Style cho chữ: text-decoration:none(dùng để xóa đường gạch dưới của hyperlink)/underline/overline/line-though/blink

		- Định nghĩa độ lệch dòng đầu tiên: text-indent: 50px (tức 50 pixel)/ 1em (kích thước mặc định của font trong trình duyệt, định nghĩa bằng font-size

	- List
		- Định nghĩa các gạch đầu dòng: list-style-type: disc(default)/circle/square (ko thứ tự)/ decimal/uper-roman/lower-roman/upper-latin/lower-latin (có thứ tự)
		- Định nghĩa các gạch đầu dòng sử dụng các hình custom: list-style-image: url('enter url image here')
		- Định nghĩa vị trí của gạch đầu dòng sẽ nằm trong hay ngoài paragraph: list-style-position: inside/outside(default)

	- Link (pseudo-class cho thẻ <a>):
		a:link → Liên kết chưa được truy cập.
		a:visited → Liên kết đã được truy cập.
		a:hover → Khi rê chuột lên liên kết.
		a:active → Khi liên kết đang được nhấn.
		Sau đó thêm thuộc tính như color, background cho các thẻ trên để định nghĩa cho thẻ a

	- Table mẫu
	table {
		width : 100%;
		background-color : green;
		border: 1px solid red; (kẻ đường border cho cả bảng) (border: [độ_dày] [kiểu_viền] [màu_viền];, thứ tự nào cũng được)

	}
	td {
		border: 1px solid red; (kẻ đường border cho từng ô)
		height: 30px;

	}

		- border-spacing
			Chức năng: Xác định khoảng cách giữa các ô trong bảng.
			Điều kiện: Chỉ có tác dụng khi border-collapse: separate (default).
			Đơn vị: px, em, rem…
			Ví dụ: border-spacing: 10px 20px; → khoảng cách ngang 10px, dọc 20px.

		- border-collapse
			Chức năng: Quy định cách hiển thị đường viền giữa các ô.
			Giá trị:
			separate (mặc định): Đường viền của mỗi ô tách biệt, có thể dùng border-spacing.
			collapse: Gộp đường viền chung giữa các ô (không dùng được border-spacing).

		- border(-top/-right/-bottom/-left)-style:
			none	Không có đường viền.
			solid	Đường viền liền nét.
			dashed	Đường viền nét đứt.
			dotted	Đường viền chấm tròn.
			double	Đường viền đôi.
			groove	Đường viền khắc chìm (3D).
			ridge	Đường viền nổi (3D).
			inset	Đường viền chìm vào trong.
			outset	Đường viền nổi ra ngoài.

		- text-align
			Chức năng: Căn lề ngang nội dung bên trong ô (<td> hoặc <th>).
			Giá trị: left/center/right

		- vertical-align
			Chức năng: Căn lề dọc nội dung bên trong ô.
			Giá trị: top/middle/bottom


	- Box model định dạng 1 vùng nội dung:
		Inline elements:
			<span> → bọc nội dung để style hoặc JS, không có ý nghĩa ngữ nghĩa.
			<b> → in đậm hình thức, không thêm ý nghĩa.
			<em> → nhấn mạnh ngữ nghĩa, mặc định in nghiêng.
		Block elements: h1, div, p, ul, li,...

		div {
		  width: 100px;              /* chiều rộng phần Content */
		  height: 100px;             /* chiều cao phần Content */
		  margin(thêm -left/-right/... để set riêng 1 góc): 5px;               /* khoảng cách bên ngoài hộp */
		  border: 10px solid red;    /* viền đỏ dày 10px */
		  padding: 20px;             /* khoảng cách từ nội dung đến viền */
		  /* padding: 20px 10px; là 20px cho top-bottom, 10px cho left-right */
		  /* padding: 20px 10px 5px; là 20px cho top, 10px cho left-right, 5px cho bottom */
		  /* padding: 20px 10px 5px 1px; là 20px cho top, 10px cho right, 5px cho bottom, 1px cho left - theo chiều kim đồng hồ */
		  /* Tổng chiều ngang = width + margin*2 + border*2 + padding*2 */
		  /* Tổng chiều cao = height + margin*2 + border*2 + padding*2 */
		  /* Để chia đều theo chiều ngang/dọc dynamically thì thay width =100%/<số lượng hàng/dọc> */
		}
		Giải thích từng lớp trong Box Model
			Content (Nội dung)
				Kích thước: 100px × 100px
				Đây là phần trung tâm, nơi chứa văn bản, hình ảnh hoặc các phần tử con.
		Padding (Đệm)
			20px ở tất cả các phía.
			Tạo khoảng trống giữa nội dung và viền(border).
			Tổng kích thước phần content + padding:
				Chiều rộng: 100 + 20 + 20 = 140px
				Chiều cao: 100 + 20 + 20 = 140px
		Border (Viền)
			10px màu đỏ bao quanh.
			Tổng kích thước phần content + padding + border:
			Chiều rộng: 140 + 10 + 10 = 160px
			Chiều cao: 140 + 10 + 10 = 160px
		Margin (Lề ngoài)
			5px bên ngoài viền.
			Đây là khoảng cách giữa hộp div này với các phần tử khác.
			Tổng diện tích chiếm chỗ (bao gồm margin):
			Chiều rộng: 160 + 5 + 5 = 170px
			Chiều cao: 160 + 5 + 5 = 170px

	- float: định nghĩa vị trí các block
		left	Phần tử trôi sang bên trái vùng chứa.
		right	Phần tử trôi sang bên phải vùng chứa.
		none	Không trôi, giữ nguyên vị trí mặc định (giá trị mặc định).
		inherit	Kế thừa giá trị float từ phần tử cha.
		initial	Trả về giá trị mặc định của float.

	- overflow: kiểm soát kích thước dư của ô:
		visible	Mặc định – Nội dung tràn ra ngoài vẫn hiển thị.
		hidden	Ẩn phần nội dung bị tràn, không hiển thị thanh cuộn.
		scroll	Ẩn phần tràn nhưng luôn hiển thị thanh cuộn (ngang & dọc).
		auto	Tự động hiển thị thanh cuộn khi cần. Bao bọc các nội dung infinite
		inherit	Kế thừa giá trị từ phần tử cha.
		(overflow-x / overflow-y)	Kiểm soát riêng tràn theo chiều ngang hoặc dọc.

	- background-image: url("duong_dan_hinh_anh.jpg"); background cho thẻ div
		Phụ trợ cho thuộc tính này
		background-repeat	Lặp lại hình nền (repeat, no-repeat, repeat-x, repeat-y)
		background-position	Vị trí hình nền (center, top left, 50% 50%, v.v.)
		background-size	Kích thước hình nền (cover, contain, 100px 200px)
		background-attachment	Cố định hình nền khi cuộn (scroll, fixed)

- Tuần 6 CSS Layout:
		+---------------------------------------------------------------+
		|                           MARGIN                              |
		|   +-------------------------------------------------------+   |
		|   |                       BORDER                          |   |
		|   |   +-----------------------------------------------+   |   |
		|   |   |                   PADDING                     |   |   |
		|   |   |   +---------------------------------------+   |   |   |
		|   |   |   |               CONTENT                 |   |   |   |
		|   |   |   +---------------------------------------+   |   |   |
		|   |   +-----------------------------------------------+   |   |
		|   +-------------------------------------------------------+   |
		+---------------------------------------------------------------+

		<----------------------- ELEMENT WIDTH -------------------------->
		(measured edge-to-edge including margin, border, and padding)

	- CSS:
		display: none (ẩn hoàn toàn, trong khi visibility:hidden là ẩn text, giữ độ rộng), block, inline : dùng để override thuộc tính của 1 thẻ
		margin: <top and bottom margin> <left and right margin>
		min/max-width/height: chiều rộng/cao tối đa/tối thiểu
		position: static (default) | relative (di chuyển bằng top+left dựa trên vị trí của chính nó (tức là relatively compared to origin) | fixed (di chuyển bằng top+left dựa trên vị trí của màn hình (vị trí luôn ở đó bất kể scroll đi đâu) | absolute (di chuyển bằng top+left dựa trên vị trí của origin (vd cùng 1 class thì là cái đầu tiên);
			#box1 {
				max-width: 200px
				width : 100px (chiều ngang 100px)
				margin: 0 auto (kcach tới top và bot là 0px, trái phải thì auto căn giữa)
			}
			.box {
			  position: relative;
			  top: 10px;   /* dịch xuống 10px */
			  left: 20px;  /* dịch sang phải 20px */
			}

			Float:
				📌 Ví dụ 1: float: left
				text
				+---------------------------------------------------+
				| [IMG]   Lorem ipsum dolor sit amet, consectetur   |
				| [IMG]   adipiscing elit. Text sẽ "wrap" xung quanh|
				| [IMG]   hình ảnh được float sang bên trái.        |
				+---------------------------------------------------+
				👉 Ở đây, hình ảnh [IMG] được đẩy sang trái, còn text sẽ bao quanh bên phải.

				📌 Ví dụ 2: float: right
				text
				+---------------------------------------------------+
				|   Lorem ipsum dolor sit amet, consectetur [IMG]   |
				|   adipiscing elit. Text sẽ "wrap" xung quanh [IMG]|
				|   hình ảnh được float sang bên phải.        [IMG] |
				+---------------------------------------------------+
				👉 Hình ảnh [IMG] được đẩy sang phải, text bao quanh bên trái.

				📌 Ví dụ 3: Clear float (clear: both)
				text
				+---------------------------------------------------+
				| [IMG]   Text bao quanh hình ảnh bên trái          |
				| [IMG]   Text bao quanh hình ảnh bên trái          |
				+---------------------------------------------------+
				|                   Footer (clear: both)            |
				+---------------------------------------------------+
				👉 Nếu không dùng clear, footer sẽ bị “trôi” lên cạnh hình. Với clear: both, footer sẽ xuống hẳn dưới, không bị ảnh hưởng bởi float.

			overflow.

				📌 overflow: visible (mặc định)
				Nội dung tràn ra ngoài vẫn hiển thị:

				+-------------------+
				|   CONTENT CONTENT CONTENT CONTENT CONTENT
				|   (tràn ra ngoài box, vẫn thấy)  >>>>>>>>
				+-------------------+
				📌 overflow: hidden
				Nội dung tràn ra ngoài sẽ bị cắt, không thấy nữa:

				+-------------------+
				|   CONTENT CONTENT C
				|   (phần dư bị ẩn) 
				+-------------------+
				📌 overflow: scroll
				Luôn có thanh cuộn (ngang/dọc) để xem phần tràn:

				+-------------------+
				|   CONTENT CONTENT |
				|   CONTENT CONTENT |
				+-------------------+
						↑↓ scrollbar
				📌 overflow: auto
				Chỉ hiện thanh cuộn khi thật sự cần (nếu nội dung tràn):

				+-------------------+
				|   CONTENT CONTENT |
				|   (nếu tràn thì có
				|   scrollbar, nếu   |
				|   không thì không) |
				+-------------------+
		Để css trỏ vào đúng thứ tự mình muốn thì sử dụng:
			.box:nth-child(3n) -> trỏ vào class box thứ 3

- Tuần 7
	Tóm tắt kiến thức cơ bản Bootstrap

	- **Khái niệm**  
	  - Bootstrap là framework CSS/JS giúp xây dựng giao diện web nhanh, responsive.  
	  - Cung cấp sẵn grid system, component (navbar, button, card…), và utility class.  

	- **Container**  
	  - `.container`: khung có chiều rộng cố định theo breakpoint, căn giữa nội dung.  
	  - `.container-fluid`: full width 100% màn hình.  

	- **Grid System (12 cột)**  
	  - Chia layout thành 12 cột.  
	  - Class cột: `.col-`, `.col-sm-`, `.col-md-`, `.col-lg-`, `.col-xl-`, `.col-xxl-`.  
	  - Breakpoints:  
		- `col-` (<576px)  
		- `col-sm-` (≥576px)  
		- `col-md-` (≥768px)  
		- `col-lg-` (≥992px)  
		- `col-xl-` (≥1200px)  
		- `col-xxl-` (≥1400px)  
	  - `.row`: chứa các `.col-`, dùng flexbox để căn chỉnh.  

	- **Component phổ biến**  
	  - **Navbar**: thanh điều hướng, responsive, hỗ trợ collapse/hamburger menu.  
	  - **Button**: `.btn`, `.btn-primary`, `.btn-outline-*`.  
	  - **Card**: khối nội dung có header, body, footer.  
	  - **Form**: input, select, checkbox, radio với style sẵn.  
	  - **Modal**: popup hộp thoại.  
	  - **Alert**: thông báo màu sắc theo trạng thái.  
	  - **Dropdown**: menu xổ xuống.  

	- **Utility classes** (class tiện ích)  
	  - **Spacing**: `m-0`, `mt-3`, `p-2` (margin/padding).  
	  - **Text**: `text-center`, `text-uppercase`, `fw-bold`.  
	  - **Display**: `d-none`, `d-block`, `d-flex`.  
	  - **Colors**: `bg-primary`, `text-danger`, `border-success`.  
	  - **Flexbox/Grid helpers**: `justify-content-center`, `align-items-start`.  

	- **Responsive helpers**  
	  - Hiển thị/ẩn theo màn hình: `d-none d-md-block` (ẩn trên mobile, hiện trên desktop).  
	  - Căn chỉnh layout khác nhau theo breakpoint.  

	- **JavaScript components** (Bootstrap 4/5)  
	  - Modal, Tooltip, Carousel, Collapse, Dropdown.  
	  - Bootstrap 5 không cần jQuery, chỉ dùng JS thuần.  

	---

	## ✅ Kết luận
	- **Container → Row → Col** là xương sống của layout.  
	- **Component** giúp dựng UI nhanh.  
	- **Utility class** giúp chỉnh sửa nhanh mà không cần CSS riêng.  
	- **Responsive** là điểm mạnh: website tự thích ứng mọi màn hình.  

- Tuần 9: javascript
	## 📌 JavaScript cơ bản – Note nhanh

	### 1. Cú pháp chèn JavaScript vào HTML
	- Dùng thẻ `<script>` trong file HTML.  
	- Có thể viết trực tiếp hoặc import file `.js`.  

	Ví dụ:
	```html
	<!-- Viết trực tiếp -->
	<script>
	  console.log("Hello JS");
	</script>

	<!-- Import file ngoài -->
	<script src="app.js"></script>
	```

	---

	### 2. Object trong JavaScript
	- **Khai báo object**:
	  ```js
	  let person = {
		name: "Long",
		age: 25,
		city: "HCM"
	  };
	  ```
	- **Truy cập thuộc tính**:
	  ```js
	  console.log(person.name);   // dot notation
	  console.log(person["age"]); // bracket notation
	  ```
	- **Thêm / sửa / xóa**:
	  ```js
	  person.job = "Developer";   // thêm
	  person.age = 26;            // sửa
	  delete person.city;         // xóa
	  ```
	- **Lặp qua object**:
	  ```js
	  for (let key in person) {
		console.log(key, person[key]);
	  }
	  ```

	---

	### 3. Vòng lặp `forEach`
	- Dùng cho **array** (mảng).  
	- Cú pháp:
	  ```js
	  let numbers = [1, 2, 3];
	  numbers.forEach(function(num, index) {
		console.log(index, num);
	  });
	  ```
	- Viết gọn với arrow function:
	  ```js
	  numbers.forEach(num => console.log(num));
	  ```

	---

	### 4. Dấu so sánh `===`
	- `===` là **so sánh nghiêm ngặt**: so sánh cả **giá trị** và **kiểu dữ liệu**.  
	- Khác với `==` (chỉ so sánh giá trị, có ép kiểu).  

	Ví dụ:
	```js
	console.log(5 == "5");   // true (ép kiểu)
	console.log(5 === "5");  // false (khác kiểu: number vs string)
	console.log(5 === 5);    // true
	```

	---

	### 5. Events (Sự kiện)
	- JS có thể gắn sự kiện cho phần tử HTML.  
	- Cách 1: inline trong HTML
	  ```html
	  <button onclick="alert('Clicked!')">Click me</button>
	  ```
	- Cách 2: gắn bằng JS (hoặc ghi tên hàm rồi tạo hàm trong javascript)
	  ```html
	  <button id="btn">Click me</button>
	  <script>
		document.getElementById("btn").addEventListener("click", function() {
		  alert("Button clicked!");
		});
	  </script>
	  ```

	---

	## ✅ Tóm tắt
	- **`<script>`**: chèn JS vào HTML.  
	- **Object**: lưu trữ dữ liệu dạng key–value.  
	- **`forEach`**: duyệt mảng.  
	- **`===`**: so sánh nghiêm ngặt (giá trị + kiểu).  
	- **Events**: xử lý tương tác người dùng (click, hover, keypress…).  
